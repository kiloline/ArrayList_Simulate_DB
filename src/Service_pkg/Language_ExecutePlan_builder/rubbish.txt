public ExecutePlan_Package Classify() throws ClassNotFound, Language_error
    {
        int point=0;
        switch(start)
        {
            case "create":
            {
                create();
                break;
            }
            case "drop":
            {
                drop();
                break;
            }
            case "insert":
            {
                //String[] s_vertical,String[] insertion_sequence
                insert();
                break;
            }
            case "delete":
            {
                delete();
                break;
            }
            case "update":
            {
                //String[] s_vertical,String[] s_condition,String[] linkmark,String[] f_vertical,String[] f_option,String[] f_condition
                update();
                break;
            }
            case "select":
            {
                //String[] s_vertical,String[] newnames,String[] linkmark,String[] f_vertical,String[] f_option,String[] f_condition
                boolean value=true;
                boolean where=true;
                boolean slc=true;
                boolean from=true;
                int Tablenumber=0;

                if(!toClassify.get(1).getName().equals("*")&value)
                    {
                        s_vertical=new LinkedList<>();
                        newnames=new LinkedList<>();
                        value=false;
                    }
                for(int loop=1,loopn=-1;loop<toClassify.size();loop++)
                {
                    if(slc)
                        ;
                    if(where)
                        switch(toClassify.get(loop).getName())
                        {
                            case "T_name":
                                call_table.add(toClassify.get(loop).getSubstance()); break;
                            case "TS_name":
                                call_tablespace.add(toClassify.get(loop).getSubstance()); break;
                            case "newList_name":
//这里对newList_name的处理方式有问题，如果一个SQL当中完全没有newList_name的话会导致其不为null但是长度为0
                                //newnames.addLast(toClassify.get(loop).getSubstance());break;
                                newnames.set(loopn, toClassify.get(loop).getSubstance());
                                break;
                            case "L_name":
                                s_vertical.addLast(toClassify.get(loop).getSubstance());
                                newnames.addLast(null);
//这样先把newname设为null
                                loopn++;//每录入一个L_name，就让loopn加一，为case "newList_name"做指示
                                break;
                            case "where":
                                where=false;
                                linkmark=new LinkedList<>();
                                f_vertical=new LinkedList<>();
                                f_option=new LinkedList<>();
                                f_condition=new LinkedList<>();
                                break;
                            case "union":
                            {
                                LinkedList<Word> union=new LinkedList<>();
                                for(int loopi=loop+1;;loopi++)
                                {
                                    if(toClassify.get(loopi).getName().equals("union"))
                                        break;
                                    if(loopi+1==toClassify.size())
                                        break;
                                    union.add(toClassify.get(loopi));
                                }
                                this.unionEPP=new Word_Classifier(backstage,union).Classify();
                                EPP.initunionEPP(unionEPP);
                                loop=loop+union.size();
                                break;
                            }
                        }
                    else
                        switch(toClassify.get(loop).getName())
                        {
                            case "L_name":
                                f_vertical.addLast(toClassify.get(loop).getSubstance());break;
                            case "Integer":case "Double":case "String":case "null":
                                f_condition.addLast(toClassify.get(loop).getSubstance());break;
                            case "is":case "isnot": case "=":case "!=":case ">":case "<":case ">=":case "<=":
                                f_option.addLast(toClassify.get(loop).getName());break;
                            case "and":case "or":
                                linkmark.addLast(toClassify.get(loop).getName());break;
                            case "union":
                            {
                                LinkedList<Word> union=new LinkedList<>();
                                for(int loopi=loop+1;;loopi++)
                                {
                                    if(toClassify.get(loopi).getName().equals("union"))
                                        break;
                                    if(loopi+1==toClassify.size())
                                        break;
                                    union.add(toClassify.get(loopi));
                                }
                                this.unionEPP=new Word_Classifier(backstage,union).Classify();
                                EPP.initunionEPP(unionEPP);
                                loop=loop+union.size();
                                break;
                            }
                        }
                }
                if(value&&where)
                    ;
                else if(value&&!where)
                    EPP.setSelect(null, null, linkmark.toArray(new String[0]), f_vertical.toArray(new String[0]), f_option.toArray(new String[0]), f_condition.toArray(new String[0]));
                else if(!value&&where)
                    EPP.setSelect(s_vertical.toArray(new String[0]), newnames.toArray(new String[0]), null, null, null, null);
                else //if(!value&&!where)
                    EPP.setSelect(s_vertical.toArray(new String[0]), newnames.toArray(new String[0]), linkmark.toArray(new String[0]), f_vertical.toArray(new String[0]), f_option.toArray(new String[0]), f_condition.toArray(new String[0]));
                break;
            }
            case "alter":
                alter();
                break;
            case "show":
                show();
                break;
            case "commit":break;
            default:
        }
        this.backstage.CheckClasses(EPP, call_tablespace, call_table);
        return EPP;
    }
